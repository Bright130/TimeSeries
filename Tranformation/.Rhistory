sample$dayhour <- floor((sample$time/60) %% 24)
sample$weekday <- ceiling((sample$time/(60*24)) %% 7)
sample$month <- ceiling((sample$time/(60*24*30)) %% 12)
sample$weekday <- wday(c(sample$weekday), label = TRUE, locale = "English")
sample$month <- month(c(sample$month), label = TRUE, locale = "English")
# Split data
set.seed(101)
sample <- sample.split(data$row_id, SplitRatio = 0.0007)
sample$dayhour <- floor((sample$time/60) %% 24)
sample$weekday <- ceiling((sample$time/(60*24)) %% 7)
sample$month <- ceiling((sample$time/(60*24*30)) %% 12)
sample$weekday <- wday(c(sample$weekday), label = TRUE, locale = "English")
sample$month <- month(c(sample$month), label = TRUE, locale = "English")
sample$place_id = as.factor(sample$place_id)
train <- subset(data, sample == TRUE)
test <- subset(data, sample == FALSE)
train <- subset(checkin, sample == TRUE)
test <- subset(checkin, sample == FALSE)
train <- train[complete.cases(train),] # clear NA
fit <- ranger(as.factor(place_id) ~ x + y + accuracy + dayhour + weekday + month, data = train, importance = "impurity", num.trees = 30)
fit <- ranger(as.factor(place_id) ~ x + y + accuracy + dayhour + weekday + month, data = sample, importance = "impurity", num.trees = 30)
fit <- ranger(as.factor(place_id) ~ x + y + accuracy + dayhour + weekday + month , data = sample, importance = "impurity", num.trees = 30)
library(ranger)
library(caTools)
# Import library
library(ggplot2)
library(dplyr)
library(tidyr)
library(lubridate)
# Select example area
checkin <- read.csv("train2.csv")
checkin %>% filter(x > 4, x < 7, y > 4, y < 7) -> sample
# Time conversion
sample$dayhour <- floor((sample$time/60) %% 24)
sample$weekday <- ceiling((sample$time/(60*24)) %% 7)
sample$month <- ceiling((sample$time/(60*24*30)) %% 12)
sample$weekday <- wday(c(sample$weekday), label = TRUE, locale = "English")
sample$month <- month(c(sample$month), label = TRUE, locale = "English")
# Split data
set.seed(101)
sample <- sample.split(data$row_id, SplitRatio = 0.0001)
sample$dayhour <- floor((sample$time/60) %% 24)
sample$weekday <- ceiling((sample$time/(60*24)) %% 7)
sample$month <- ceiling((sample$time/(60*24*30)) %% 12)
sample$weekday <- wday(c(sample$weekday), label = TRUE, locale = "English")
sample$month <- month(c(sample$month), label = TRUE, locale = "English")
sample$place_id = as.factor(sample$place_id)
train <- subset(checkin, sample == TRUE)
test <- subset(checkin, sample == FALSE)
train <- train[complete.cases(train),] # clear NA
fit <- ranger(as.factor(place_id) ~ x + y + accuracy + dayhour + weekday + month , data = sample, importance = "impurity", num.trees = 30)
fit <- ranger(as.factor(place_id) ~ x + y + accuracy + dayhour + weekday + month, data = sample, importance = "impurity", num.trees = 30)
library(randomForest)
fit <- randomForest(as.factor(place_id) ~ x + y + accuracy + dayhour + weekday + month, data = sample, importance = "impurity", num.trees = 30)
fit <- randomForest(as.factor(place_id) ~ x + y + accuracy + dayhour + weekday + month, data = sample)
sessionInfo()
library(ranger)
library(caTools)
library(caret)
data <- read.csv("sample.csv")
# Split data
set.seed(101)
sample <- sample.split(data$row_id, SplitRatio = 0.004)
train <- subset(data, sample == TRUE)
test <- subset(data, sample == FALSE)
train <- train[complete.cases(train),]
test <- test[complete.cases(test),]
test <- head(test,800)
# Train
fit <- ranger(as.factor(place_id) ~ x + y + accuracy + dayhour + weekday + month, data = train, importance = "impurity", num.trees = 150, verbose = TRUE)
importance(fit)
train <- train[complete.cases(train),]
test <- test[complete.cases(test),]
# Predict
predict <- predict(fit, test)
save(fit, file = "ranger_model_a.RData")
# Result
result <- predict$predictions == test$place_id
cat("Prediction", length(which(result)) * 100 / length(result), "% corrected (",length(which(result)),"/",length(result),")")
install.packages("xgboost")
install.packages("xgboost")
library(ranger)
library(caTools)
library(caret)
data <- read.csv("sample.csv")
# Split data
set.seed(101)
sample <- sample.split(data$row_id, SplitRatio = 0.04)
train <- subset(data, sample == TRUE)
test <- subset(data, sample == FALSE)
train <- train[complete.cases(train),]
test <- test[complete.cases(test),]
test <- head(test,800)
# Train
sample <- sample.split(data$row_id, SplitRatio = 0.001)
train <- subset(data, sample == TRUE)
test <- subset(data, sample == FALSE)
train <- train[complete.cases(train),]
test <- test[complete.cases(test),]
test <- head(test,800)
require(xgboost)
require(methods)
data(train,package='xgboost')
data(agaricus.train,package='xgboost')
data(agaricus.test,package='xgboost')
data(train,package='xgboost')
library(xgboost)
library(readr)
library(stringr)
library(caret)
library(car)
install.packages(cacr)
install.packages(car)
install.packages("car")
sample <- sample.split(data$row_id, SplitRatio = 0.001)
train <- subset(data, sample == TRUE)
test <- subset(data, sample == FALSE)
train <- train[complete.cases(train),]
test <- test[complete.cases(test),]
test <- head(test,800)
test <- head(test,400)
labels = df_train['labels']
labels = df_train['place_id']
labels = train['place_id']
sparse_matrix <- sparse.model.matrix(response ~ .-1, data = campaign)
train = train[-grep("lables",colnames(train))]
all = rbind(train,test)
xgb <- xgboost(data = data.matrix(X[,1]),label=y,
eta = 0.1,
max_depth = 15,
nround=25,
subsample = 0.5,
colsample_bytree = 0.5,
seed = 1,
eval_metric = "merror",
objective = "multi:softprob",
num_class = 12,
nthread = 3
)
bst <- xgboost(data = train$place_id, max.depth = 2, eta = 1, nround = 2,
nthread = 2, objective = "binary:logistic")
data(agaricus.train, package='xgboost')
data(agaricus.test, package='xgboost')
bst <- xgboost(data = train$place_id, lebel= train$y max.depth = 2, eta = 1, nround = 2,
nthread = 2, objective = "binary:logistic")
bst <- xgboost(data = train$place_id, lebel= train$y ,max.depth = 2, eta = 1, nround = 2,
nthread = 2, objective = "binary:logistic")
data(agaricus.train, package='xgboost')
data(agaricus.test, package='xgboost')
train <- agaricus.train
test <- agaricus.test
# fit model
bst <- xgboost(data = train$data, label = train$label, max.depth = 2, eta = 1, nround = 2,
nthread = 2, objective = "binary:logistic")
# predict
pred <- predict(bst, test$data)
y_pred <- predict(xgb, data.matrix(X_test[,-1]))
xgb <- xgboost(data = data.matrix(X[,-1]),
label = y,
eta = 0.1,
max_depth = 15,
nround=25,
subsample = 0.5,
colsample_bytree = 0.5,
seed = 1,
eval_metric = "merror",
objective = "multi:softprob",
num_class = 12,
nthread = 3
)
set.seed(101)
sample <- sample.split(data$row_id, SplitRatio = 0.001)
train <- subset(data, sample == TRUE)
test <- subset(data, sample == FALSE)
train <- train[complete.cases(train),]
test <- test[complete.cases(test),]
test <- head(test,400)
# Train
fit <- ranger(as.factor(place_id) ~ x + y + accuracy + dayhour + weekday + month, data = train, importance = "impurity", num.trees = 150, verbose = TRUE)
# Split data
set.seed(101)
sample <- sample.split(data$row_id, SplitRatio = 0.001)
train <- subset(data, sample == TRUE)
test <- subset(data, sample == FALSE)
train <- train[complete.cases(train),]
test <- test[complete.cases(test),]
test <- head(test,400)
train = train[-grep('labels', colnames(train))]
all = rbind(train,test)
xgb <- xgboost(data = data.matrix(train[,-1]),
label = y,
eta = 0.1,
max_depth = 15,
nround=25,
subsample = 0.5,
colsample_bytree = 0.5,
seed = 1,
eval_metric = "merror",
objective = "multi:softprob",
num_class = 12,
nthread = 3
)
xgb <- xgboost(data = data.matrix(train[,-1]),
label <- recode(labels$labels,"'True'=1; 'False'=0),
eta = 0.1,
max_depth = 15,
nround=25,
subsample = 0.5,
colsample_bytree = 0.5,
seed = 1,
eval_metric = "merror",
objective = "multi:softprob",
num_class = 12,
nthread = 3
)
xgb <- xgboost(data = data.matrix(train[,-1]),
label <- recode(labels$labels,"'True'=1; 'False'=0),
eta = 0.1,
max_depth = 15,
nround=25,
subsample = 0.5,
colsample_bytree = 0.5,
seed = 1,
eval_metric = "merror",
objective = "multi:softprob",
num_class = 12,
nthread = 3
)
y <- xgboost(data = data.matrix(train[,-1]),
label <- recode(labels$labels,"'True'=1; 'False'=0)
y <- xgboost(data = data.matrix(train[,-1]),
label <- recode(labels$labels,"'True'=1; 'False'=0)
y <- recode(labels$labels,"'True'=1; 'False'=0)
)
kaodfj
eri
}
;
()
()
""
exit
]
''
$x <= "doc,tor"
for (i in range(x)) {
print($x)
}
$x <= "doc,tor" ;
x <= "doc,tor"
$x <= "doc,tor"
print(x)
x <= "doc,tor"
x <- "doc,tor"
,tor"
for (i in range(x)) {
print(x)
}
x <- "doc,tor"
for (i in range(x)) {
print(x)
}
x <- "doc,tor"
for (i in range(x)) {
print(x[i])
}
print(x[i-1])
print(i)
x <- "doc,tor"
for (i in range(x)) {
print(i)
}
#SMA from Time series Douglas Page23
library(readr)
library(magrittr)
library(dplyr)
library(ggplot2)
library(TTR)
sunspot <- read_csv("sunspot.csv")
#adjust zero value
geomean <- exp(mean(log(sunspot$`Yearly Sunspot Number`[is.finite(log(sunspot$`Yearly Sunspot Number`))]))) #geometric mean and avoid -inf
sunspot$ln = log(((sunspot$`Yearly Sunspot Number`^0.5)-1)/(0.5*(geomean^(0.5-1))))#power family at gramma = -0.5 (square root tranformation)
#tranformed
ggplot(sunspot,aes(Year))+geom_line(aes(y=sunspot$ln),color="black")+geom_point(aes(y=sunspot$ln),color="black")+labs(y="ln(Yearly Sunspot Number)",title="Total Sunspot Numbers (Annual)",subtitle="From Solar Influences Data Analysis Center",caption="source : sidc.be/silso/archiveyearlyssnplot")
#source
ggplot(sunspot,aes(Year))+geom_line(aes(y=sunspot$`Yearly Sunspot Number`),color="black")+geom_point(aes(y=sunspot$`Yearly Sunspot Number`),color="black")+labs(y="Yearly Sunspot Number",title="Total Sunspot Numbers (Annual)",subtitle="From Solar Influences Data Analysis Center",caption="source : sidc.be/silso/archiveyearlyssnplot")
print('Source data')
summary(sunspot$`Yearly Sunspot Number`)
sd(sunspot$`Yearly Sunspot Number`)
print('Transformed data')
summary(sunspot$ln)
sd(sunspot$ln[is.finite(sunspot$ln)])
#SMA to source
sunspot$SMAsource <- SMA(sunspot$`Yearly Sunspot Number`,5) #TTR lib
ggplot(sunspot,aes(Year))+geom_point(aes(y=sunspot$`Yearly Sunspot Number`- sunspot$SMAsource))
#SMA to transformed
sunspot$SMAtrans <- SMA(sunspot$ln,5)
ggplot(sunspot,aes(Year))+geom_point(aes(y=sunspot$ln - sunspot$SMAtrans))
#SMA transformed to source format
sunspot$trans <- (exp(sunspot$SMAtrans)*(0.5*geomean^(0.5-1))+1)^(1/0.5)
#prove
ggplot(sunspot,aes(Year))+geom_line(aes(y=sunspot$`Yearly Sunspot Number`),color="black")+geom_line(aes(y=sunspot$SMAsource),color="blue")+geom_line(aes(y=sunspot$trans),color="red")
print (mean((sunspot$`Yearly Sunspot Number`-sunspot$SMAsource)[is.finite((sunspot$`Yearly Sunspot Number`-sunspot$SMAsource))]))
print (mean((sunspot$`Yearly Sunspot Number`-sunspot$trans)[is.finite((sunspot$`Yearly Sunspot Number`-sunspot$trans))]))
setwd("C:/Users/iBright/Desktop/Seminar/Tranformation")
#SMA from Time series Douglas Page23
library(readr)
library(magrittr)
library(dplyr)
library(ggplot2)
library(TTR)
sunspot <- read_csv("sunspot.csv")
#adjust zero value
geomean <- exp(mean(log(sunspot$`Yearly Sunspot Number`[is.finite(log(sunspot$`Yearly Sunspot Number`))]))) #geometric mean and avoid -inf
sunspot$ln = log(((sunspot$`Yearly Sunspot Number`^0.5)-1)/(0.5*(geomean^(0.5-1))))#power family at gramma = -0.5 (square root tranformation)
#tranformed
ggplot(sunspot,aes(Year))+geom_line(aes(y=sunspot$ln),color="black")+geom_point(aes(y=sunspot$ln),color="black")+labs(y="ln(Yearly Sunspot Number)",title="Total Sunspot Numbers (Annual)",subtitle="From Solar Influences Data Analysis Center",caption="source : sidc.be/silso/archiveyearlyssnplot")
#source
ggplot(sunspot,aes(Year))+geom_line(aes(y=sunspot$`Yearly Sunspot Number`),color="black")+geom_point(aes(y=sunspot$`Yearly Sunspot Number`),color="black")+labs(y="Yearly Sunspot Number",title="Total Sunspot Numbers (Annual)",subtitle="From Solar Influences Data Analysis Center",caption="source : sidc.be/silso/archiveyearlyssnplot")
print('Source data')
summary(sunspot$`Yearly Sunspot Number`)
sd(sunspot$`Yearly Sunspot Number`)
print('Transformed data')
summary(sunspot$ln)
sd(sunspot$ln[is.finite(sunspot$ln)])
#SMA to source
sunspot$SMAsource <- SMA(sunspot$`Yearly Sunspot Number`,5) #TTR lib
ggplot(sunspot,aes(Year))+geom_point(aes(y=sunspot$`Yearly Sunspot Number`- sunspot$SMAsource))
#SMA to transformed
sunspot$SMAtrans <- SMA(sunspot$ln,5)
ggplot(sunspot,aes(Year))+geom_point(aes(y=sunspot$ln - sunspot$SMAtrans))
#SMA transformed to source format
sunspot$trans <- (exp(sunspot$SMAtrans)*(0.5*geomean^(0.5-1))+1)^(1/0.5)
#prove
ggplot(sunspot,aes(Year))+geom_line(aes(y=sunspot$`Yearly Sunspot Number`),color="black")+geom_line(aes(y=sunspot$SMAsource),color="blue")+geom_line(aes(y=sunspot$trans),color="red")
print (mean((sunspot$`Yearly Sunspot Number`-sunspot$SMAsource)[is.finite((sunspot$`Yearly Sunspot Number`-sunspot$SMAsource))]))
print (mean((sunspot$`Yearly Sunspot Number`-sunspot$trans)[is.finite((sunspot$`Yearly Sunspot Number`-sunspot$trans))]))
View(sunspot)
View(sunspot)
fit = lm(Year ~`Yearly Sunspot Number`)
fit = lm(sunspot$Year ~sunspot$`Yearly Sunspot Number`)
fit
plot(fit)
summary(fit)
plot(fit)
plot(fit)
fit1 = lm(sunspot$Year ~sunspot$ln)
plot(fit1)
plot(fit)
fit1 = lm(sunspot$ln)
fit1 = lm(sunspot$ln ~sunspot$Year)
plot(fit1)
fit = lm(sunspot$`Yearly Sunspot Number` ~sunspot$Year)
plot(fit)
plot(fit)
plot(fit1)
sd(sunspot$`Yearly Sunspot Number`)
sd(sunspot$ln[is.finite(sunspot$ln)])
sd(sunspot$ln[(sunspot$ln)])
sd(sunspot$ln)
sd(c(1,2,3))
sd(c(100,200,300))
sd(c(101,102,103))
sd(c(0.1,0.2,0.3))
sd(c(0.1,0.2,0.4))
sd(c(1,2,4))
print (mean((sunspot$`Yearly Sunspot Number`-sunspot$SMAsource)[is.finite((sunspot$`Yearly Sunspot Number`-sunspot$SMAsource))]))
print (mean((sunspot$`Yearly Sunspot Number`-sunspot$trans)[is.finite((sunspot$`Yearly Sunspot Number`-sunspot$trans))]))
anova(fit)
anova(fit1)
plot(fit)
plot(fit1)
plot(fit1)
plot(fit)
acf(sunspot$ln,NULL,plot=TRUE)
acf(sunspot$`Yearly Sunspot Number`,NULL,plot=TRUE)
acf(sunspot$`Yearly Sunspot Number`,10,plot=TRUE)
acf(sunspot$`Yearly Sunspot Number`,5,plot=TRUE)
acf(sunspot$`Yearly Sunspot Number`,NULL,plot=TRUE)  #acf
acf(sunspot$ln,NULL,plot=TRUE)  #acf
acf(sunspot$`Yearly Sunspot Number`,NULL,plot=TRUE)  #acf
acf(sunspot$ln,NULL,plot=TRUE)  #acf
lag.plot(sunspot$`Yearly Sunspot Number`,1)
lag.plot(sunspot$ln,1)
lag.plot(sunspot$`Yearly Sunspot Number`,1)
lag.plot(sunspot$ln,1)
#SMA from Time series Douglas Page23
library(readr)
library(magrittr)
library(dplyr)
library(ggplot2)
library(TTR)
NasaGiss <- read_csv("NasaGiss.csv")
#blue
NasaGiss <- NasaGiss %>% mutate(Avg = (Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov+Dec)/12.0) %>% select(Year,Avg)
#black
NasaGiss$SMA <- SMA(NasaGiss$Avg,5) #TTR lib
ggplot(NasaGiss,aes(Year))+geom_line(aes(y=NasaGiss$Avg),color="blue")+geom_point(aes(y=NasaGiss$Avg),color="blue",shape=4)+ylim(-0.75,1)+geom_line(aes(y=NasaGiss$SMA),color="black")+geom_point(aes(y=NasaGiss$SMA),color="black")+labs(y="Average Annual Anomaly (oC)",title="Global Mean Estimates Based on Land-Surface Air Temperature Anomalies Only",subtitle="Global-mean monthly, seasonal, and annual means, 1880-2014",caption="source : data.giss.nasa.gov/gistemp")
setwd("C:/Users/iBright/Desktop/Seminar/SMA")
#SMA from Time series Douglas Page23
library(readr)
library(magrittr)
library(dplyr)
library(ggplot2)
library(TTR)
NasaGiss <- read_csv("NasaGiss.csv")
#blue
NasaGiss <- NasaGiss %>% mutate(Avg = (Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov+Dec)/12.0) %>% select(Year,Avg)
#black
NasaGiss$SMA <- SMA(NasaGiss$Avg,5) #TTR lib
ggplot(NasaGiss,aes(Year))+geom_line(aes(y=NasaGiss$Avg),color="blue")+geom_point(aes(y=NasaGiss$Avg),color="blue",shape=4)+ylim(-0.75,1)+geom_line(aes(y=NasaGiss$SMA),color="black")+geom_point(aes(y=NasaGiss$SMA),color="black")+labs(y="Average Annual Anomaly (oC)",title="Global Mean Estimates Based on Land-Surface Air Temperature Anomalies Only",subtitle="Global-mean monthly, seasonal, and annual means, 1880-2014",caption="source : data.giss.nasa.gov/gistemp")
lag.plot(NasaGiss$Avg,1)
lag.plot(sunspot$ln,1)
lag.plot(NasaGiss$Avg,1)
lag.plot(NasaGiss$SMA,1)
lag.plot(NasaGiss$Avg,1)
acf(sunspot$ln,NULL,plot=TRUE)
acf(NasaGiss$Avg,NULL,plot=TRUE)
acf(NasaGiss$Avg,100,plot=TRUE)
acf(NasaGiss$Avg,NULL,plot=TRUE)
lag.plot(NasaGiss$Avg,1)
View(NasaGiss)
setwd("C:/Users/iBright/Desktop/Seminar/ACF")
NasaGiss <- read_csv("MacroTrends_WFM.csv")
library(readr)
MacroTrends_WFM <- read_csv("MacroTrends_WFM.csv",
col_types = cols(date = col_date(format = "%d-%m-%y")))
View(MacroTrends_WFM)
View(MacroTrends_WFM)
library(readr)
stock<- read_csv("MacroTrends_WFM.csv",  col_types = cols(date = col_date(format = "%d-%m-%y")))
lag.plot(stock$close)
plot(stock$date,stock$close)
lag.plot(stock$close)
acf(stock$close)
acf(stock$close,100)
acf(stock$close,200)
acf(stock$close)
acf(stock$close,type="covariance")
acf(stock$close)
acf(stock$close,main="hello")
acf(stock$close,main="Whole Foods market daily closing stock price")
acf(stock$close,main="Whole Foods Market daily closing stock price")
acf(stock$close,60,main="Whole Foods Market daily closing stock price")
lag.plot(sunspot$ln,1)
NULL
acf(sunspot$ln,NULL,plot=TRUE)  #acf
lag.plot(sunspot$`Yearly Sunspot Number`,1)
acf(sunspot$`Yearly Sunspot Number`,NULL,plot=TRUE)  #acf
acf(sunspot$ln,NULL,plot=TRUE)  #acf
acf(sunspot$ln,NULL,plot=TRUE)  #acf
acf(sunspot$`Yearly Sunspot Number`,NULL,plot=TRUE)  #acf
acf(sunspot$ln,NULL,plot=TRUE)  #acf
acf(sunspot$ln,plot=TRUE)  #acf
acf(sunspot$`Yearly Sunspot Number`,NULL,plot=TRUE)  #acf
acf(sunspot$`Yearly Sunspot Number`,NULL,plot=TRUE,main="Yearly Sunspot Number")  #acf
View(sunspot)
View(sunspot)
#library(TTR)
sunspot <- read_csv("sunspot.csv")
setwd("C:/Users/iBright/Desktop/Seminar/Tranformation")
#library(TTR)
sunspot <- read_csv("sunspot.csv")
geomean <- exp(mean(log(sunspot$`Yearly Sunspot Number`[is.finite(log(sunspot$`Yearly Sunspot Number`))]))) #geometric mean and avoid -inf
sunspot$ln = log(((sunspot$`Yearly Sunspot Number`^0.5)-1)/(0.5*(geomean^(0.5-1))))#power family at gramma = -0.5 (square root tranformation)
#tranformed
ggplot(sunspot,aes(Year))+geom_line(aes(y=sunspot$ln),color="black")+geom_point(aes(y=sunspot$ln),color="black")+labs(y="ln(Yearly Sunspot Number)",title="Total Sunspot Numbers (Annual)",subtitle="From Solar Influences Data Analysis Center",caption="source : sidc.be/silso/archiveyearlyssnplot")
#SMA from Time series Douglas Page23
library(readr)
library(magrittr)
library(dplyr)
library(ggplot2)
#library(TTR)
sunspot <- read_csv("sunspot.csv")
#adjust zero value
geomean <- exp(mean(log(sunspot$`Yearly Sunspot Number`[is.finite(log(sunspot$`Yearly Sunspot Number`))]))) #geometric mean and avoid -inf
sunspot$ln = log(((sunspot$`Yearly Sunspot Number`^0.5)-1)/(0.5*(geomean^(0.5-1))))#power family at gramma = -0.5 (square root tranformation)
#tranformed
ggplot(sunspot,aes(Year))+geom_line(aes(y=sunspot$ln),color="black")+geom_point(aes(y=sunspot$ln),color="black")+labs(y="ln(Yearly Sunspot Number)",title="Total Sunspot Numbers (Annual)",subtitle="From Solar Influences Data Analysis Center",caption="source : sidc.be/silso/archiveyearlyssnplot")
#source
ggplot(sunspot,aes(Year))+geom_line(aes(y=sunspot$`Yearly Sunspot Number`),color="black")+geom_point(aes(y=sunspot$`Yearly Sunspot Number`),color="black")+labs(y="Yearly Sunspot Number",title="Total Sunspot Numbers (Annual)",subtitle="From Solar Influences Data Analysis Center",caption="source : sidc.be/silso/archiveyearlyssnplot")
print('Source data')
summary(sunspot$`Yearly Sunspot Number`)
sd(sunspot$`Yearly Sunspot Number`)
print('Transformed data')
summary(sunspot$ln)
sd(sunspot$ln)
#Transformed to source format
#sunspot$trans <- (exp(sunspot$SMAtrans)*(0.5*geomean^(0.5-1))+1)^(1/0.5)
#prove
fit = lm(sunspot$`Yearly Sunspot Number` ~sunspot$Year)
fit1 = lm(sunspot$ln ~sunspot$Year)
plot(fit)
acf(sunspot$`Yearly Sunspot Number`,NULL,plot=TRUE,main="Yearly Sunspot Number")  #acf
acf(sunspot$ln,plot=TRUE)  #acf
lag.plot(sunspot$`Yearly Sunspot Number`,1)
lag.plot(sunspot$ln,1)
#tranformed
ggplot(sunspot,aes(Year))+geom_line(aes(y=sunspot$ln),color="black")+geom_point(aes(y=sunspot$ln),color="black")+labs(y="ln(Yearly Sunspot Number)",title="Total Sunspot Numbers (Annual)",subtitle="From Solar Influences Data Analysis Center",caption="source : sidc.be/silso/archiveyearlyssnplot")
#source
ggplot(sunspot,aes(Year))+geom_line(aes(y=sunspot$`Yearly Sunspot Number`),color="black")+geom_point(aes(y=sunspot$`Yearly Sunspot Number`),color="black")+labs(y="Yearly Sunspot Number",title="Total Sunspot Numbers (Annual)",subtitle="From Solar Influences Data Analysis Center",caption="source : sidc.be/silso/archiveyearlyssnplot")
#tranformed
ggplot(sunspot,aes(Year))+geom_line(aes(y=sunspot$ln),color="black")+geom_point(aes(y=sunspot$ln),color="black")+labs(y="ln(Yearly Sunspot Number)",title="Total Sunspot Numbers (Annual)",subtitle="From Solar Influences Data Analysis Center",caption="source : sidc.be/silso/archiveyearlyssnplot")
#source
ggplot(sunspot,aes(Year))+geom_line(aes(y=sunspot$`Yearly Sunspot Number`),color="black")+geom_point(aes(y=sunspot$`Yearly Sunspot Number`),color="black")+labs(y="Yearly Sunspot Number",title="Total Sunspot Numbers (Annual)",subtitle="From Solar Influences Data Analysis Center",caption="source : sidc.be/silso/archiveyearlyssnplot")
#tranformed
ggplot(sunspot,aes(Year))+geom_line(aes(y=sunspot$ln),color="black")+geom_point(aes(y=sunspot$ln),color="black")+labs(y="ln(Yearly Sunspot Number)",title="Total Sunspot Numbers (Annual)",subtitle="From Solar Influences Data Analysis Center",caption="source : sidc.be/silso/archiveyearlyssnplot")
#tranformed
ggplot(sunspot,aes(Year))+geom_line(aes(y=sunspot$ln),color="black")+geom_point(aes(y=sunspot$ln),color="black")+labs(y="ln(Yearly Sunspot Number)",title="Total Sunspot Numbers (Annual)",subtitle="From Solar Influences Data Analysis Center",caption="source : sidc.be/silso/archiveyearlyssnplot")
#source
ggplot(sunspot,aes(Year))+geom_line(aes(y=sunspot$`Yearly Sunspot Number`),color="black")+geom_point(aes(y=sunspot$`Yearly Sunspot Number`),color="black")+labs(y="Yearly Sunspot Number",title="Total Sunspot Numbers (Annual)",subtitle="From Solar Influences Data Analysis Center",caption="source : sidc.be/silso/archiveyearlyssnplot")
acf(sunspot$`Yearly Sunspot Number`,NULL,plot=TRUE,main="Yearly Sunspot Number")  #acf
